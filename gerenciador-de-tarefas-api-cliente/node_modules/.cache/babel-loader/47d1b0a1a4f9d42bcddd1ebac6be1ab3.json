{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/andersson/\\xC1rea de Trabalho/cursos/react/gerenciador-de-tarefas-api-cliente/src/listar/concluir-tarefa.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\n\nfunction ConcluirTarefa(props) {\n  _s();\n\n  const [exibirModal, setExibirModal] = useState(false);\n\n  function handleAbrirModal(event) {\n    /**Impede que atualiza a tela */\n    event.preventDefault();\n    setExibirModal(true);\n  }\n\n  function handleFecharModal(event) {\n    setExibirModal(false);\n  }\n\n  function handleConcluirTarefa(event) {\n    event.preventDefault();\n    const tarefasDb = localStorage['tarefas'];\n    let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n    tarefas = tarefas.map(tarefa => {\n      if (tarefa.id === props.tarefa.id) {\n        tarefa.concluida = true;\n      }\n\n      return tarefa;\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n    setExibirModal(false);\n    props.recarregarTarefas(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: props.className,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: \"btn-sm\",\n      onClick: handleAbrirModal,\n      \"data-testid\": \"btn-abrir-modal\",\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faClipboardCheck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: exibirModal,\n      onHide: handleFecharModal,\n      \"data-testid\": \"modal\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Concluir tarefa\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [\"Deseja realmente concluir a seguinte tarefa?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: props.tarefa.nome\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleConcluirTarefa,\n          \"data-testid\": \"btn-concluir\",\n          children: \"Sim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"light\",\n          onClick: handleFecharModal,\n          \"data-testid\": \"btn-fechar-modal\",\n          children: \"N\\xE3o\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ConcluirTarefa, \"GqhfgmpYthcmLWqD1PJQdYeo4c4=\");\n\n_c = ConcluirTarefa;\nConcluirTarefa.prototype = {\n  tarefa: PropTypes.object.isRequired,\n  recarregarTarefas: PropTypes.func.isRequired,\n\n  /*Define se elemento vai ser exibido */\n  className: PropTypes.string\n};\nexport default ConcluirTarefa;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConcluirTarefa\");","map":{"version":3,"sources":["/home/andersson/Área de Trabalho/cursos/react/gerenciador-de-tarefas-api-cliente/src/listar/concluir-tarefa.js"],"names":["PropTypes","useState","Modal","Button","FontAwesomeIcon","faClipboardCheck","ConcluirTarefa","props","exibirModal","setExibirModal","handleAbrirModal","event","preventDefault","handleFecharModal","handleConcluirTarefa","tarefasDb","localStorage","tarefas","JSON","parse","map","tarefa","id","concluida","stringify","recarregarTarefas","className","nome","prototype","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\n\nfunction ConcluirTarefa(props){\n\n    const [exibirModal, setExibirModal] = useState(false);\n \n    function handleAbrirModal(event){\n        /**Impede que atualiza a tela */\n        event.preventDefault();\n        setExibirModal(true);\n    }\n\n    function handleFecharModal(event){\n         setExibirModal(false);\n    }\n\n    function handleConcluirTarefa(event){\n        event.preventDefault();\n        const tarefasDb = localStorage['tarefas'];\n        let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n        tarefas = tarefas.map(tarefa => {\n            if(tarefa.id === props.tarefa.id){\n                tarefa.concluida = true;\n            }\n            return tarefa;\n        });\n        localStorage['tarefas'] = JSON.stringify(tarefas);\n        setExibirModal(false);\n        props.recarregarTarefas(true);\n    }\n\n    return(\n        <span className={props.className}>\n            <Button className=\"btn-sm\" onClick={handleAbrirModal} data-testid=\"btn-abrir-modal\">\n              <FontAwesomeIcon icon={faClipboardCheck} />    \n            </Button> \n            <Modal show={exibirModal} onHide={handleFecharModal} data-testid=\"modal\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Concluir tarefa\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Deseja realmente concluir a seguinte tarefa?\n                    <br />\n                  <strong>{props.tarefa.nome}</strong>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleConcluirTarefa} data-testid=\"btn-concluir\">\n                        Sim\n                    </Button>\n                    <Button variant=\"light\" onClick={handleFecharModal} data-testid=\"btn-fechar-modal\">\n                        Não\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </span>\n    );\n\n}\n\nConcluirTarefa.prototype = {\n    tarefa: PropTypes.object.isRequired,\n    recarregarTarefas: PropTypes.func.isRequired,\n\n    /*Define se elemento vai ser exibido */\n    className: PropTypes.string\n}\n\n\nexport default ConcluirTarefa;"]},"metadata":{},"sourceType":"module"}