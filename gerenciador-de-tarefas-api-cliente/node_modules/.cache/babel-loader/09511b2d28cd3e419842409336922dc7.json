{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/andersson/\\xC1rea de Trabalho/cursos/react/gerenciador-de-tarefas-api-cliente/src/atualizar/atualizar-tarefa.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Jumbotron, Modal } from 'react-bootstrap';\nimport { navigate, A } from 'hookrouter';\n\nfunction AtualizarTarefa(props) {\n  _s();\n\n  const [tarefa, setTarefa] = useState('');\n  const [exibirModal, setExibirModal] = useState(false);\n  const [formValidado, setFormValidado] = useState(false);\n  const [carregarTarefa, setCarregarTarefa] = useState(true);\n  useEffect(() => {\n    if (carregarTarefa) {\n      const tarefasDb = localStorage['tarefas'];\n      const tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n      const tarefa = tarefas.filter(t => t.id === parseInt(props.id))[0];\n      setTarefa(tarefa.nome);\n      setCarregarTarefa(false);\n    }\n  }, [carregarTarefa, props]);\n\n  function voltar(event) {\n    event.preventDefault();\n    navigate('/');\n  }\n\n  function handleFecharModal() {\n    navigate('/');\n  }\n\n  function atualizar(event) {\n    event.preventDefault();\n    setFormValidado(true);\n    setExibirModal(true);\n\n    if (event.currentTarget.checkValidity() === true) {\n      //obtem as tarefas \n      const tarefasDb = localStorage['tarefas'];\n      let tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; //persiste a tarefa\n\n      tarefas = tarefas.map(tarefaObj => {\n        if (tarefaObj.id === parseInt(props.id)) {\n          tarefaObj.nome = tarefa;\n        }\n\n        return tarefaObj;\n      });\n      localStorage['tarefas'] = JSON.stringify(tarefas);\n      setExibirModal(true);\n    }\n  }\n\n  function handleTxtTarefa(event) {\n    setTarefa(event.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center\",\n      children: \"Atualizar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: atualizar,\n        noValidate: true,\n        validated: formValidado,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Tarefa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Digite a tarefa\",\n            minLength: \"5\",\n            maxLength: \"100\",\n            required: true,\n            \"data-testid\": \"txt-tarefa\",\n            onChange: handleTxtTarefa,\n            value: tarefa\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"A tarefa deve conter ao menos 3 caracteres.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            type: \"submit\",\n            \"data-testid\": \"btn-atualizar\",\n            children: \"Atualizar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(A, {\n            href: \"/\",\n            className: \"btn btn-light\",\n            onClick: voltar,\n            children: \"Voltar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: exibirModal,\n        onHide: handleFecharModal,\n        \"data-testid\": \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Sucesso\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          \"data-testid\": \"modal-body\",\n          children: \"Tarefa Atualizada com sucesso!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            onClick: handleFecharModal,\n            children: \"Continuar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AtualizarTarefa, \"yJSXIyms+RSWJm1M2CejS5dfQlQ=\");\n\n_c = AtualizarTarefa;\nAtualizarTarefa.propTypes = {\n  id: PropTypes.number.isRequired\n};\nexport default AtualizarTarefa;\n\nvar _c;\n\n$RefreshReg$(_c, \"AtualizarTarefa\");","map":{"version":3,"sources":["/home/andersson/√Årea de Trabalho/cursos/react/gerenciador-de-tarefas-api-cliente/src/atualizar/atualizar-tarefa.js"],"names":["useState","useEffect","PropTypes","Button","Form","Jumbotron","Modal","navigate","A","AtualizarTarefa","props","tarefa","setTarefa","exibirModal","setExibirModal","formValidado","setFormValidado","carregarTarefa","setCarregarTarefa","tarefasDb","localStorage","tarefas","JSON","parse","filter","t","id","parseInt","nome","voltar","event","preventDefault","handleFecharModal","atualizar","currentTarget","checkValidity","map","tarefaObj","stringify","handleTxtTarefa","target","value","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Jumbotron, Modal } from 'react-bootstrap';\nimport { navigate, A } from 'hookrouter'; \n\nfunction AtualizarTarefa(props){\n\n    const [tarefa, setTarefa] = useState('');\n    const [exibirModal, setExibirModal] = useState(false);\n    const [formValidado, setFormValidado] = useState(false);\n    const [carregarTarefa, setCarregarTarefa] = useState(true);\n\n    useEffect(() => {\n        if(carregarTarefa) {\n            const tarefasDb = localStorage['tarefas'];\n            const tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; \n            const tarefa = tarefas.filter(\n                t => t.id === parseInt(props.id)\n            )[0];\n\n            setTarefa(tarefa.nome);    \n            setCarregarTarefa(false);   \n        }\n\n    },[carregarTarefa, props]);\n\n    function voltar(event){\n        event.preventDefault();\n        navigate('/');\n    }\n\n    function handleFecharModal(){\n        navigate('/');\n    }\n\n    function atualizar(event){\n        event.preventDefault();\n        setFormValidado(true);\n        setExibirModal(true);\n        if (event.currentTarget.checkValidity() === true) {\n            //obtem as tarefas \n            const tarefasDb = localStorage['tarefas'];\n            let tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; \n  \n            //persiste a tarefa\n            tarefas = tarefas.map(tarefaObj => {\n              if(tarefaObj.id === parseInt(props.id)){\n                  tarefaObj.nome = tarefa;\n              }   \n              return tarefaObj;\n            });\n            localStorage['tarefas'] = JSON.stringify(tarefas);\n            setExibirModal(true);\n        }\n    }\n\n    function handleTxtTarefa(event){\n        setTarefa(event.target.value);\n    }\n\n    return (\n        <div>\n            <h3 className=\"text-center\">Atualizar</h3>\n            <Jumbotron>\n                <Form onSubmit={atualizar} noValidate validated={formValidado}>\n                    <Form.Group>\n                        <Form.Label>Tarefa</Form.Label>\n                        <Form.Control\n                           type=\"text\"\n                           placeholder=\"Digite a tarefa\"\n                           minLength=\"5\"\n                           maxLength=\"100\"\n                           required\n                           data-testid=\"txt-tarefa\" \n                           onChange={handleTxtTarefa}\n                           value={tarefa} />\n                        <Form.Control.Feedback type=\"invalid\"> \n                             A tarefa deve conter ao menos 3 caracteres.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"text-center\">\n                    <Button\n                        variant=\"success\"\n                        type=\"submit\"\n                        data-testid=\"btn-atualizar\">Atualizar\n                        </Button>\n                        &nbsp;\n                        <A href=\"/\" className=\"btn btn-light\" onClick={voltar}>Voltar</A>\n                    </Form.Group>\n                </Form>\n                <Modal show={exibirModal} onHide={handleFecharModal}  data-testid=\"modal\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Sucesso</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body  data-testid=\"modal-body\" >\n                        Tarefa Atualizada com sucesso!\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button \n                        variant=\"success\"\n                        onClick={handleFecharModal}\n                        >\n                           Continuar\n                        </Button>\n                    </Modal.Footer>\n                </Modal> \n            </Jumbotron>\n        </div>\n    )\n}\n\nAtualizarTarefa.propTypes = {\n    id: PropTypes.number.isRequired\n}\n\nexport default AtualizarTarefa;"]},"metadata":{},"sourceType":"module"}