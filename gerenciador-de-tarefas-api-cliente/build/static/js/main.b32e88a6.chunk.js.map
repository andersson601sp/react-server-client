{"version":3,"sources":["listar/concluir-tarefa.js","listar/remover-tarefa.js","listar/items-lista-tarefas.js","listar/paginacao.js","listar/ordenacao.js","listar/listar-tarefas.js","models/tarefa.model.js","cadastrar/cadastrar-tarefa.js","atualizar/atualizar-tarefa.js","gerenciador-tarefas.js","reportWebVitals.js","index.js"],"names":["ConcluirTarefa","props","useState","exibirModal","setExibirModal","handleFecharModal","event","className","Button","onClick","preventDefault","data-testid","icon","faClipboardCheck","Modal","show","onHide","Header","closeButton","Title","Body","tarefa","nome","Footer","variant","tarefasDb","localStorage","tarefas","JSON","parse","map","id","concluida","stringify","recarregarTarefas","prototype","PropTypes","object","isRequired","func","string","RemoverTarefa","setExibirModa","faTrashAlt","filter","proptype","ItensListaTarefas","marcarConcluida","width","style","textDecoration","href","faEdit","Paginacao","gerarItemNumerico","pagina","Pagination","Item","active","paginaAtual","mudarPagina","numPaginas","Math","ceil","totalItems","itemsPorPagina","items","push","First","disabled","Prev","Next","gerarProximoItem","Last","gerarUltimoItem","obterPaginacao","Ordenacao","faSort","ordenarAsc","ordenarDesc","faSortUp","faSortDown","ListarTarefas","setTarefas","carregarTarefas","setCarregarTarefas","setTotalItems","setPaginaAtual","setOrdenarAsc","setOrdenarDesc","filtroTarefa","setFiltroTarefa","useEffect","tarefasDB","listaTarefas","t","toLowerCase","indexOf","sort","t1","t2","length","splice","obterTarefas","Table","striped","bordered","hover","responsive","data-testeid","faPlus","Form","Control","type","value","onChange","target","Tarefa","this","CadastrarTarefa","setTarefa","formValidado","setFormValidado","navigate","Jumbotron","validated","noValidate","onSubmit","currentTarget","checkValidity","Date","getTime","Group","Label","placeholder","minLength","maxLength","required","Feedback","AtualizarTarefa","carregarTarefa","setCarregarTarefa","parseInt","tarefaObj","routes","GerenciadorTarefas","useRoutes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b32e88a6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\n\nfunction ConcluirTarefa(props){\n\n    const [exibirModal, setExibirModal] = useState(false);\n \n    function handleAbrirModal(event){\n        /**Impede que atualiza a tela */\n        event.preventDefault();\n        setExibirModal(true);\n    }\n\n    function handleFecharModal(event){\n         setExibirModal(false);\n    }\n\n    function handleConcluirTarefa(event){\n        event.preventDefault();\n        const tarefasDb = localStorage['tarefas'];\n        let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n        tarefas = tarefas.map(tarefa => {\n            if(tarefa.id === props.tarefa.id){\n                tarefa.concluida = true;\n            }\n            return tarefa;\n        });\n        localStorage['tarefas'] = JSON.stringify(tarefas);\n        setExibirModal(false);\n        props.recarregarTarefas(true);\n    }\n\n    return(\n        <span className={props.className}>\n            <Button className=\"btn-sm\" onClick={handleAbrirModal} data-testid=\"btn-abrir-modal\">\n              <FontAwesomeIcon icon={faClipboardCheck} />    \n            </Button> \n            <Modal show={exibirModal} onHide={handleFecharModal} data-testid=\"modal\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Concluir tarefa\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    Deseja realmente concluir a seguinte tarefa?\n                    <br />\n                  <strong>{props.tarefa.nome}</strong>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleConcluirTarefa} data-testid=\"btn-concluir\">\n                        Sim\n                    </Button>\n                    <Button variant=\"light\" onClick={handleFecharModal} data-testid=\"btn-fechar-modal\">\n                        Não\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </span>\n    );\n\n}\n\nConcluirTarefa.prototype = {\n    tarefa: PropTypes.object.isRequired,\n    recarregarTarefas: PropTypes.func.isRequired,\n\n    /*Define se elemento vai ser exibido */\n    className: PropTypes.string\n}\n\n\nexport default ConcluirTarefa;","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { Modal, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nfunction RemoverTarefa(props){\n\n    const [exibirModal, setExibirModa] = useState(false);\n\n    function handleAbrirModal(event){\n       event.preventDefault();\n       setExibirModa(true);\n    }\n\n    function handleFecharModal(){\n        setExibirModa(false);\n    }\n\n    function handleRemoverTarefa(event){\n        event.preventDefault();\n        const tarefasDb = localStorage['tarefas'];\n        let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n        tarefas = tarefas.filter(tarefa => tarefa.id !== props.tarefa.id);\n        localStorage['tarefas'] = JSON.stringify(tarefas);\n        setExibirModa(false);\n        props.recarregarTarefas(true);\n    }\n\n    return (\n        <span>\n            <Button variant=\"danger\"\n                className=\"btn-sm\"\n                onClick={handleAbrirModal}\n                data-testid=\"btn-abrir-modal\">\n                <FontAwesomeIcon icon={faTrashAlt} />\n            </Button>\n            <Modal show={exibirModal} onHide={handleFecharModal} data-testid=\"modal\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Remover Tarefa</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                        Deseja realmente remover a seguinte tarefa?\n                        <br />\n                        <strong>{props.tarefa.nome}</strong>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\"\n                            onClick={handleRemoverTarefa}\n                            data-testid=\"btn-remover\">\n                            Sim\n                    </Button>\n                    <Button variant=\"light\"\n                            onClick={handleFecharModal}>\n                             Não   \n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </span>\n    )\n\n}\n\nRemoverTarefa.proptype = {\n    tarefa: PropTypes.object.isRequired,\n    recarregarTarefas: PropTypes.func.isRequired\n}\n\n\nexport default RemoverTarefa;","import PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEdit } from '@fortawesome/free-solid-svg-icons';\nimport { A } from 'hookrouter';\nimport  ConcluirTarefa  from './concluir-tarefa';\nimport RemoverTarefa from './remover-tarefa';\n\nfunction ItensListaTarefas(props) {\n\n    function marcarConcluida(tarefa){\n        return tarefa.concluida ? 'line-through' : 'none';\n    }\n\n    return (\n      props.tarefas.map(tarefa => \n        <tr key={tarefa.id} data-testid=\"tarefa\">\n          <td width=\"75%\"\n          data-testid=\"nome-tarefa\"\n             style={{ textDecoration: marcarConcluida(tarefa) }} >\n              {tarefa.nome}\n          </td>\n          <td className=\"text-right\">\n              <ConcluirTarefa \n                   tarefa={tarefa} \n                   recarregarTarefas={props.recarregarTarefas} \n                   className={tarefa.concluida ? 'hidden' : null} />\n                   &nbsp;\n              <A href={\"/atualizar/\" + tarefa.id} className={tarefa.concluida? 'hidden' : 'btn btn-warning btn-sm'}>\n                  <FontAwesomeIcon icon={faEdit} />\n              </A>\n              &nbsp;\n              <RemoverTarefa\n                tarefa={tarefa}\n                recarregarTarefas={props.recarregarTarefas} />\n          </td>\n        </tr>\n        )\n    );\n}\n\n//parametros passado da listar-tarefas ItensListaTarefas da tbody\nItensListaTarefas.propTypes = {\n    tarefas: PropTypes.array.isRequired,\n    recarregarTarefas: PropTypes.func.isRequired\n}\n\nexport default ItensListaTarefas;","import Pagination from 'react-bootstrap/Pagination';\nimport PropTypes from 'prop-types';\n\nfunction Paginacao(props){\n\n    function gerarPrimeiroItem(){\n        return (\n            <Pagination.First\n              key=\"pagFirst\"\n              onClick={() => props.mudarPagina(1)}\n              disabled={props.paginaAtual === 1} />\n        );\n    }\n\n    function gerarItemAnterior(){\n        return (\n            <Pagination.Prev\n                key=\"pagPrev\"\n                onClick={() => props.mudarPagina(props.paginaAtual -1)}\n                disabled={props.paginaAtual === 1}  />\n        )\n    }\n\n    function gerarItemNumerico(pagina){\n        return(\n            <Pagination.Item\n             key={pagina}\n             active={pagina === props.paginaAtual}\n             onClick={() => props.mudarPagina(pagina)}>\n                 {pagina}\n             </Pagination.Item>\n        );\n    }\n\n    function gerarProximoItem(numPaginas){\n        return(\n            <Pagination.Next\n             key=\"pagnext\"\n             onClick={() => props.mudarPagina(props.paginaAtual + 1)}\n             disabled={props.paginaAtual === numPaginas} />\n        );\n    }\n\n    function gerarUltimoItem(numPaginas){\n        return(\n            <Pagination.Last\n              key=\"pagLast\"\n              onClick={() => props.mudarPagina(numPaginas)}\n              disabled={props.paginaAtual === numPaginas} />\n        )\n    }\n\n    function obterPaginacao(){\n     //Math.ceil arredonda valor pra cima\n      const numPaginas = Math.ceil(props.totalItems / props.itemsPorPagina)\n      let items = [];\n      items.push(gerarPrimeiroItem());  \n      items.push(gerarItemAnterior());\n\n      for (let pagina = 1; pagina <= numPaginas; pagina++){\n          items.push(gerarItemNumerico(pagina))\n      }\n\n      items.push(gerarProximoItem(numPaginas));\n      items.push(gerarUltimoItem(numPaginas));\n      return items;\n    }\n\n    return(\n        <Pagination data-testid=\"paginacao\">\n          {obterPaginacao()}\n        </Pagination>\n    );\n}\n\nPaginacao.propTypes ={\n    totalItems: PropTypes.number.isRequired,\n    itemsPorPagina: PropTypes.number.isRequired,\n    paginaAtual: PropTypes.number.isRequired,\n    mudarPagina: PropTypes.func.isRequired\n}\n\nexport default Paginacao;","import { FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faSort, faSortUp, faSortDown } from '@fortawesome/free-solid-svg-icons';\nimport PropTypes from 'prop-types';\n\nfunction Ordenacao(props) {\n\n   function handleAscDesc(){\n       return ( props.ordenarAsc || props.ordenarDesc) ? 'hidden' : '';\n   }\n\n   function handleAsc(){\n        return  props.ordenarDesc ? '' : 'hidden';\n   }\n\n   function handleDesc(){\n        return  props.ordenarAsc ? '' : 'hidden';\n    }   \n\n   return (\n       <span>\n          <FontAwesomeIcon\n            icon={faSort}\n            className={handleAscDesc()}\n            data-testid=\"faSort\" />\n          <FontAwesomeIcon\n            icon={faSortUp}\n            className={handleAsc()}\n            data-testid=\"faSortUp\" />\n          <FontAwesomeIcon\n            icon={faSortDown}\n            className={handleDesc()}\n            data-testid=\"faSortDown\" />\n       </span>\n   )\n}\n\nOrdenacao.propTypes = {\n    ordenarAsc: PropTypes.bool.isRequired,\n    ordenarDesc: PropTypes.bool.isRequired\n}\n\nexport default Ordenacao;","import { useState, useEffect } from 'react'; \nimport { A } from 'hookrouter';\nimport { Table, Form } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport ItensListaTarefas from './items-lista-tarefas';\nimport Paginacao from  './paginacao';\nimport Ordenacao from './ordenacao';\n\nfunction ListarTarefas(){\n \n    const ITENS_POR_PAG = 3;\n\n    const [tarefas, setTarefas] = useState([]);\n    const [carregarTarefas, setCarregarTarefas] = useState(true);\n    const [totalItems, setTotalItems] = useState(0);\n    const [paginaAtual, setPaginaAtual] =  useState(1);\n    const [ordenarAsc, setOrdenarAsc] = useState(false);\n    const [ordenarDesc, setOrdenarDesc] = useState(false);\n    const [filtroTarefa, setFiltroTarefa] = useState('');\n\n\n    //segundo parametro do useEffect serve para indicar qual useState chama este useEffect\n    useEffect(() => {\n\n        function obterTarefas(){\n            const tarefasDB = localStorage['tarefas'];\n            let listaTarefas = tarefasDB ? JSON.parse(tarefasDB) : [];\n\n            //filtrar\n            listaTarefas = listaTarefas.filter(\n                /* '=== 0' => busca pelo inicio da string para buscar por qualquer parte da string usar '>= 0' */\n                t => t.nome.toLowerCase().indexOf(filtroTarefa.toLowerCase()) >= 0 \n            );\n\n            //Ordernar\n            if(ordenarAsc){\n                listaTarefas.sort((t1, t2) => (t1.nome.toLowerCase() > t2.nome.toLowerCase()) ? 1 : -1);    \n            }\n            else if(ordenarDesc){\n                listaTarefas.sort((t1, t2) => (t1.nome.toLowerCase() < t2.nome.toLowerCase()) ? 1 : -1);\n            }\n\n            //Paginacao\n            setTotalItems(listaTarefas.length);\n            setTarefas(listaTarefas.splice((paginaAtual - 1) * ITENS_POR_PAG, ITENS_POR_PAG));\n        }\n        \n        //se nao foi carregado\n        if(carregarTarefas){\n            obterTarefas();\n            setCarregarTarefas(false);\n        }\n        \n    }, [carregarTarefas, paginaAtual, ordenarAsc, ordenarDesc, filtroTarefa]);/*<<< aqui define quais objetos o useeffect vai monitorar */\n\n    function handleMudarPagina(pagina){\n       setPaginaAtual(pagina);\n       setCarregarTarefas(true);\n    }\n\n    function handleOrdenar(event){\n        event.preventDefault();\n        if((!ordenarAsc && !ordenarDesc) || ordenarDesc){\n            setOrdenarAsc(true);\n            setOrdenarDesc(false);\n        }\n        else if(setOrdenarAsc){\n            setOrdenarAsc(false);\n            setOrdenarDesc(true);\n        } \n        else {\n            setOrdenarAsc(false);\n            setOrdenarDesc(false);\n        }\n        setCarregarTarefas(true);\n    }\n\n    function handleFiltrar(event){\n       setFiltroTarefa(event.target.value);\n       setCarregarTarefas(true);\n    }\n\n    return (\n       <div className=\"text-center\">\n           <h3>Tarefas a fazer</h3>\n           <Table striped bordered hover responsive data-testid=\"tabela\">\n               <thead>\n                   <tr>\n                       <th>\n                           <a href=\"/\" onClick={handleOrdenar}>\n                           Tarefa\n                           &nbsp;\n                           <Ordenacao\n                            ordenarAsc={ordenarAsc}\n                            ordenarDesc={ordenarDesc} />\n                           </a>\n                        </th>\n                       <th>\n                           <A href=\"/cadastrar\"\n                              className=\"btn btn-success btn-sm\"\n                              data-testeid=\"btn-nova-tarefa\" >\n                                  <FontAwesomeIcon icon={faPlus} />\n                                  &nbsp;\n                                  Nova Tarefa\n                              </A>\n                       </th>\n                   </tr>\n                   <tr>\n                       <th>\n                           <Form.Control\n                             type=\"text\"\n                             value={filtroTarefa}\n                             onChange={handleFiltrar}\n                             data-testid=\"txt-tarefa\" \n                             className=\"filtro-tarefa\" />\n                       </th>\n                       <th>&nbsp;</th>\n                   </tr>\n               </thead>\n               <tbody>\n                    <ItensListaTarefas \n                    tarefas={tarefas}\n                    recarregarTarefas={setCarregarTarefas}\n                    />\n               </tbody>\n           </Table>\n           <Paginacao \n            totalItems={totalItems}\n            itemsPorPagina={ITENS_POR_PAG}\n            paginaAtual={paginaAtual}\n            mudarPagina={handleMudarPagina} />\n       </div>\n    )\n}\n\n\nexport default ListarTarefas;","function Tarefa(id, nome, concluida) {\n    this.id = id;\n    this.nome = nome;\n    this.concluida = concluida;\n\n    return {\n        id: id,\n        nome: nome,\n        concluida: concluida\n    };\n}\n\nexport default Tarefa;","import { useState } from 'react';\nimport { Button, Form, Jumbotron, Modal } from 'react-bootstrap';\nimport { navigate, A}  from 'hookrouter';\nimport Tarefa from '../models/tarefa.model';\n\nfunction CadastrarTarefa(){\n\n    const [tarefa, setTarefa] = useState('');\n    const [formValidado, setFormValidado] = useState(false);\n    const [exibirModal, setExibirModal] = useState(false);\n\n    function cadastrar(event){\n      event.preventDefault();\n      setFormValidado(true);\n      if (event.currentTarget.checkValidity() === true) {\n          //obtem as tarefas \n          const tarefasDb = localStorage['tarefas'];\n          const tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; \n\n          //persiste a tarefa\n          tarefas.push(new Tarefa(new Date().getTime(), tarefa, false));\n          localStorage['tarefas'] = JSON.stringify(tarefas);\n          setExibirModal(true);\n      }\n    }\n\n    function handleTxtTarefa(event){\n     setTarefa(event.target.value);\n   }\n\n\n   function handleFecharModal(){\n       navigate('/');\n   }\n\n\n    return (\n        <div>\n            <h3 className=\"text-center\" >Cadastrar</h3>\n            <Jumbotron>\n                <Form \n                  validated={formValidado}\n                  noValidate\n                  onSubmit={cadastrar}\n                >\n                    <Form.Group>\n                        <Form.Label>Tarefa</Form.Label>\n                        <Form.Control type=\"text\" \n                        placeholder=\"digite a tarefa\"\n                        minLength=\"5\"\n                        maxLength=\"100\"\n                        required\n                        value={tarefa}\n                        onChange={handleTxtTarefa}\n                        data-testid=\"txt-tarefa\"\n                        /> \n                        <Form.Control.Feedback type=\"invalid\">\n                            A Tarefa de contem ao menos 5 caracteres\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"text-center\">\n                        <Button\n                        variant=\"success\"\n                        type=\"submit\"\n                        data-testid=\"btn-cadastrar\">Cadastrar\n                        </Button>\n                        &nbsp;\n                        <A href=\"/\" className=\"btn btn-light\">Voltar</A>\n                    </Form.Group>\n                </Form>  \n                <Modal show={exibirModal} onHide={handleFecharModal}  data-testid=\"modal\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Sucesso</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body  data-testid=\"modal-body\" >\n                        Tarefa Adicionada com sucesso!\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button \n                        variant=\"success\"\n                        onClick={handleFecharModal}\n                        >\n                           Continuar\n                        </Button>\n                    </Modal.Footer>\n                </Modal>   \n            </Jumbotron>\n        </div>\n    )\n}\n\nexport default CadastrarTarefa;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Jumbotron, Modal } from 'react-bootstrap';\nimport { navigate, A } from 'hookrouter'; \n\nfunction AtualizarTarefa(props){\n\n    const [tarefa, setTarefa] = useState('');\n    const [exibirModal, setExibirModal] = useState(false);\n    const [formValidado, setFormValidado] = useState(false);\n    const [carregarTarefa, setCarregarTarefa] = useState(true);\n\n    useEffect(() => {\n        if(carregarTarefa) {\n            const tarefasDb = localStorage['tarefas'];\n            const tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; \n            const tarefa = tarefas.filter(\n                t => t.id === parseInt(props.id)\n            )[0];\n\n            setTarefa(tarefa.nome);    \n            setCarregarTarefa(false);   \n        }\n\n    },[carregarTarefa, props]);\n\n    function voltar(event){\n        event.preventDefault();\n        navigate('/');\n    }\n\n    function handleFecharModal(){\n        navigate('/');\n    }\n\n    function atualizar(event){\n        event.preventDefault();\n        setFormValidado(true);\n        setExibirModal(true);\n        if (event.currentTarget.checkValidity() === true) {\n            //obtem as tarefas \n            const tarefasDb = localStorage['tarefas'];\n            let tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; \n  \n            //persiste a tarefa\n            tarefas = tarefas.map(tarefaObj => {\n              if(tarefaObj.id === parseInt(props.id)){\n                  tarefaObj.nome = tarefa;\n              }   \n              return tarefaObj;\n            });\n            localStorage['tarefas'] = JSON.stringify(tarefas);\n            setExibirModal(true);\n        }\n    }\n\n    function handleTxtTarefa(event){\n        setTarefa(event.target.value);\n    }\n\n    return (\n        <div>\n            <h3 className=\"text-center\">Atualizar</h3>\n            <Jumbotron>\n                <Form onSubmit={atualizar} noValidate validated={formValidado}>\n                    <Form.Group>\n                        <Form.Label>Tarefa</Form.Label>\n                        <Form.Control\n                           type=\"text\"\n                           placeholder=\"Digite a tarefa\"\n                           minLength=\"5\"\n                           maxLength=\"100\"\n                           required\n                           data-testid=\"txt-tarefa\" \n                           onChange={handleTxtTarefa}\n                           value={tarefa} />\n                        <Form.Control.Feedback type=\"invalid\"> \n                             A tarefa deve conter ao menos 3 caracteres.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group className=\"text-center\">\n                    <Button\n                        variant=\"success\"\n                        type=\"submit\"\n                        data-testid=\"btn-atualizar\">Atualizar\n                        </Button>\n                        &nbsp;\n                        <A href=\"/\" className=\"btn btn-light\" onClick={voltar}>Voltar</A>\n                    </Form.Group>\n                </Form>\n                <Modal show={exibirModal} onHide={handleFecharModal}  data-testid=\"modal\" >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Sucesso</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body  data-testid=\"modal-body\" >\n                        Tarefa Atualizada com sucesso!\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button \n                        variant=\"success\"\n                        onClick={handleFecharModal}\n                        >\n                           Continuar\n                        </Button>\n                    </Modal.Footer>\n                </Modal> \n            </Jumbotron>\n        </div>\n    )\n}\n\nAtualizarTarefa.propTypes = {\n    id: PropTypes.number.isRequired\n}\n\nexport default AtualizarTarefa;","/* Não esta sendo necessario importa  React pois o mesmo esta sendo herdado da index.js*/\nimport './gerenciador-tarefas.css';\nimport  {useRoutes } from 'hookrouter';\nimport ListarTarefas from './listar/listar-tarefas';\nimport CadastrarTarefa from './cadastrar/cadastrar-tarefa';\nimport AtualizarTarefa from './atualizar/atualizar-tarefa';\n\nconst routes = {\n  '/' : () => <ListarTarefas />,\n  '/cadastrar' : () => <CadastrarTarefa />,\n  '/atualizar/:id' : ({id}) => <AtualizarTarefa id={id} />\n}\n\nfunction GerenciadorTarefas() {\n  return useRoutes(routes); \n}\n\nexport default GerenciadorTarefas;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GerenciadorTarefas from './gerenciador-tarefas';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <GerenciadorTarefas />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}